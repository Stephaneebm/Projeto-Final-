#include <p24FJ256GB106.h>

#include "user.h"
#include "My_UART1.h"
#include "Teclado3x4.h"
#include "displayLCD_.h"

//inlcuir outras bibliotecas necessarias


//Indicacao do clock utilizado pelo uC para o compilador
// Verificar o uso do define _BOOTLOADER na user.h
#ifndef _BOOTLOADER  
// CONFIG2
#pragma config POSCMOD = XT   // XT Oscillator mode selected
#pragma config OSCIOFNC = ON  // OSC2/CLKO/RC15 as as port I/O (RC15)
#pragma config FCKSM = CSDCMD // Clock Switching and Monitor disabled
#pragma config FNOSC = PRI    // Primary Oscillator (XT, HS, EC)
#pragma config IESO = ON      // Int Ext Switch Over Mode enabled

// CONFIG1
#pragma config WDTPS = PS32768 // Watchdog Timer Postscaler (1:32,768)
#pragma config FWPSA = PR128   // WDT Prescaler (1:128)
#pragma config WINDIS = ON     // Watchdog Timer Window Mode disabled
#pragma config FWDTEN = OFF    // Watchdog Timer disabled
#pragma config ICS = PGx2      // Emulator/debugger uses EMUC2/EMUD2
#pragma config GWRP = OFF      // Writes to program memory allowed
#pragma config GCP = OFF       // Code protection is disabled
#pragma config JTAGEN = OFF    // JTAG port is disabled

#endif



//Indicacao do clock utilizado pelo uC para o compilador
#ifdef _BOOTLOADER  
    #define PS			1		// Fclk = 32 MHz (configurada bo bootloader)
#else
    #define PS			0		// Fclk = 4MHz (usar 4 MHz na simulação do ISIS)
#endif

char dia,tecla;
int q=0,x,s=0;

 // Funcao principal
int main(void) {
    //configure os perifericos
    
    int a,b,c,escrever,estado;
    
    UART1_Initialize();    //configuração da 'tela preta'
    LCD_Init(); 
    Teclado_Init();
    LCD_LimpaDisplay(); 
    
    
    
    TRISDbits.TRISD5=0; 
    LATDbits.LATD5 = 0;
    TRISDbits.TRISD10=0; 
    LATDbits.LATD10 = 0;
    
    TRISDbits.TRISD0=0;   //pino RD0 como saída
    RPOR5bits.RP11R=18;   //funcionalidade 18 (COMPARE 1 Tabela 10-3) - pino RP0 
    // configurando o Timer 1 (pois vou escolher ele para funcionar com o COMPARE)
    T4CON=0;                                    //reset do TMR4
    
    T4CONbits.TCKPS=PS;                 //PS 1:8   
    
    OC1R = 2000;                          //tempo em alta (dc)  
    OC1RS = 39999;                        //periodo do PWM  20ms
    OC1CON1=0;                            //reset do OC1
    OC1CON2=0;                            //reset do OC2
    OC1CON1bits.OCTSEL=0b010;  //TMR1 como temporizador do COMPARE 1
    OC1CON1bits.OCM=0b110;         //modo PWM
    OC1CON2bits.SYNCSEL = 0b11111;  // OC1RS limitar a contagem do OC1TMR
    OC1TMR = 0;                                //zera o contador do COMPARE         
    
    IPC0bits.OC1IP=3;
    IFS0bits.OC1IF=0;
    
    IEC0bits.OC1IE=1;
    
    
    T1CON=0;
    TMR1=0;
    PR1 = 31249;
    T1CON = 0x0020;
    IPC0bits.T1IP = 1;
    IFS0bits.T1IF = 0;
    
    
    T2CON=0;
    TMR2=0;
    PR2 = 31249;
    T2CON = 0x0020;
    IPC1bits.T2IP = 2;
    IFS0bits.T2IF = 0;
    
    AD1PCFGbits.PCFG4=1;
    TRISBbits.TRISB4=1;
    
    RPINR0bits.INT1R = 28;
    
    INTCON2bits.INT1EP = 1;
    IFS1bits.INT1IF = 0;
    IPC5bits.INT1IP = 5;
    
    IEC1bits.INT1IE = 1;
    IEC0bits.T1IE = 1;    
    IEC0bits.T2IE = 1;
    
    a=0;
    b=0;
    escrever=1;
    estado=0;
    
    LCD_PosicaoCursor(1,7);
    LCD_EscreveFrase("Ola");
    __delay_ms(1500);
      
    while (1) // Loop principal
    {
        
        if(escrever==1)
        {
            
            LCD_PosicaoCursor(1,7);
            LCD_EscreveFrase("   ");
            LCD_PosicaoCursor(1,1);
            LCD_EscreveFrase("Dia:");
            do{
                dia = Teclado_Varredura();       //chamando a função para ler a tecla pressionada do teclado
                __delay_ms(200);

            }while(dia==0);

            LCD_EscreveCaractere(dia);
            __delay_ms(1000);
            LCD_PosicaoCursor(1,1);

            LCD_EscreveFrase("Selecao do tempo");
            escrever=0;
        }

        if(escrever==0)
        {
            LCD_PosicaoCursor(2,8);
            LCD_EscreveInteiro(a);
            LCD_PosicaoCursor(2,9);
            LCD_EscreveInteiro(b);
            LCD_PosicaoCursor(2,9);
        }

        
        
        do{
            tecla = Teclado_Varredura();       //chamando a função para ler a tecla pressionada do teclado
            __delay_ms(200);

        }while(tecla==0);

        
        if(tecla=='3')
        {
            
            
            b=b+5;
            LCD_PosicaoCursor(2,9);
            if(b>9)
            {
                b=0;
                a++;
                LCD_PosicaoCursor(2,9);
            }
        }
        else if(tecla=='1')
        {
            b=b-5;
            LCD_PosicaoCursor(2,9);
            if(b<0)
            {
                b=5;
                a--;
                LCD_PosicaoCursor(2,9);
            }
        }
        else if(tecla=='2')
        {
            c=a*10+b;
            if(c==0)
            {
                LCD_EscreveFrase("                ");
                LCD_EscreveFrase("Tempo Invalido");
                __delay_ms(2000);
                LCD_EscreveFrase("                ");
                LCD_EscreveFrase("Tempo atual:");

            }

            switch(c)
            {
                case 5:
                    x=5;
                    break;
                case 10:
                    x=10;
                    break;
                case 15:
                    x=15;
                    break;
                case 20:
                    x=20;
                    break;
                case 25:
                    x=25;
                    break;
                case 30:
                    x=30;
                    break;
                case 35:
                    x=35;
                    break;
                case 40:
                    x=40;
                    break;
            }
            T1CONbits.TON = 1;            
        }
        else if(tecla=='*')
        {
            T2CONbits.TON = 0;
            LCD_PosicaoCursor(1,1);
            LCD_EscreveFrase("                ");
            LCD_PosicaoCursor(2,8);
            LCD_EscreveFrase("  ");
            LCD_PosicaoCursor(1,1);
            LCD_EscreveFrase("Remedio tomado<3");
            printf("\n\rRailla tomou o remedio");
            LATDbits.LATD10 = 0;
            __delay_ms(2000);
            LCD_PosicaoCursor(1,1);
            LCD_EscreveFrase("                ");
            LCD_PosicaoCursor(1,1);
            LCD_EscreveFrase("Tempo atual:");
            q=0;
            IEC0bits.OC1IE=0;
            T1CONbits.TON = 1;
        }
        else if(tecla=='#')
        {
            T1CONbits.TON = 0;
            LCD_LimpaDisplay();
            LCD_PosicaoCursor(1,1);
            LCD_EscreveFrase("Dia:");
            do{
                dia = Teclado_Varredura();       //chamando a função para ler a tecla pressionada do teclado
                __delay_ms(200);

            }while(dia==0);
            
            LCD_EscreveCaractere(dia);
            __delay_ms(1000);
            LCD_PosicaoCursor(1,1);
            LCD_EscreveFrase("   ");
            LCD_PosicaoCursor(1,1);
            LCD_EscreveFrase("Tempo atual:");
            T1CONbits.TON = 1;
        }
    }

    return -1;
}

// Interrupt function 
void __attribute__((interrupt,no_auto_psv)) _T1Interrupt(void){
    q++; 
    LATDbits.LATD5=0;      
    IFS0bits.T1IF = 0;
    if(q==x)
    {
        LATDbits.LATD10 = 1;
        T2CONbits.TON = 1;    
        T1CONbits.TON = 0;
        
        q=0;
    }
    
}
void __attribute__((interrupt,no_auto_psv)) _T2Interrupt(void){
    
    int i=0;
    IEC0bits.OC1IE=1;
    T4CONbits.TON=1;
    do
    {
        LATDbits.LATD5^=1;
        __delay_ms(200);
        i++;
        tecla = Teclado_Varredura();       //chamando a função para ler a tecla pressionada do teclado
        __delay_ms(200);
        if(i==7)
        {
            printf("\n\rOla, Railla ainda nao tomou o remedio do horario.");
        }

    }while(tecla!='*');
    LATDbits.LATD10 = 0;
    IFS0bits.T2IF = 0;
    T1CONbits.TON = 1;
    T2CONbits.TON = 0;
    
}

void __attribute__((interrupt,no_auto_psv)) _INT1Interrupt(void)
{
    
    T1CONbits.TON=0;
    T2CONbits.TON=0;
    LATDbits.LATD5=1;
    do
    {
        LATDbits.LATD10 = 1; //BUZZER
        printf("\n\rEMERGENCIA COM RAILLA!!!");
        LCD_PosicaoCursor(1,1);
        LCD_EscreveFrase("                ");
        LCD_PosicaoCursor(2,8);
        LCD_EscreveFrase("  ");
        LCD_PosicaoCursor(1,1);
        LCD_EscreveFrase("EMERGENCIA!!!");
        __delay_ms(200);
        tecla = Teclado_Varredura();       //chamando a função para ler a tecla pressionada do teclado
        __delay_ms(200);
    }while(tecla!='8');
    printf("\n\rEmergencia de Railla resolvida:)");
    LCD_PosicaoCursor(1,1);
    LCD_EscreveFrase("            ");
    LCD_PosicaoCursor(1,1);
    LCD_EscreveFrase("Tempo atual:");
    
    LATDbits.LATD10 = 0;
    T1CONbits.TON=1;
    T2CONbits.TON=1;
    LATDbits.LATD5=0;
    IEC1bits.INT1IE = 0;

}
void __attribute__((interrupt,no_auto_psv)) _OC1Interrupt(void)
{
    switch (dia)
        {
            case '1':
                OC1R=2250;
                break;
            case '2':
                OC1R=2500;
                break;
            case '3':
                OC1R=2750;
                break;
            case'4':
                OC1R=300;
                break;
            case'5':
                OC1R=3250;
                break;
            case'6':
                OC1R=3500;
                break;
            case'7':
                OC1R=3750;
                break;
        }
    if(tecla=='*')
    {
        OC1R=2000;
    }
    IFS0bits.OC1IF=0;
}
