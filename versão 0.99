
#include "user.h"
#include "My_UART1.h"
#include "Teclado3x4.h"
#include "displayLCD_.h"

//inlcuir outras bibliotecas necessarias


//Indicacao do clock utilizado pelo uC para o compilador
// Verificar o uso do define _BOOTLOADER na user.h
#ifndef _BOOTLOADER  
// CONFIG2
#pragma config POSCMOD = XT   // XT Oscillator mode selected
#pragma config OSCIOFNC = ON  // OSC2/CLKO/RC15 as as port I/O (RC15)
#pragma config FCKSM = CSDCMD // Clock Switching and Monitor disabled
#pragma config FNOSC = PRI    // Primary Oscillator (XT, HS, EC)
#pragma config IESO = ON      // Int Ext Switch Over Mode enabled

// CONFIG1
#pragma config WDTPS = PS32768 // Watchdog Timer Postscaler (1:32,768)
#pragma config FWPSA = PR128   // WDT Prescaler (1:128)
#pragma config WINDIS = ON     // Watchdog Timer Window Mode disabled
#pragma config FWDTEN = OFF    // Watchdog Timer disabled
#pragma config ICS = PGx2      // Emulator/debugger uses EMUC2/EMUD2
#pragma config GWRP = OFF      // Writes to program memory allowed
#pragma config GCP = OFF       // Code protection is disabled
#pragma config JTAGEN = OFF    // JTAG port is disabled

#endif



//Indicacao do clock utilizado pelo uC para o compilador
#ifdef _BOOTLOADER  
    #define PS			1		// Fclk = 32 MHz (configurada bo bootloader)
#else
    #define PS			0		// Fclk = 4MHz (usar 4 MHz na simulação do ISIS)
#endif
#ifdef _BOOTLOADER  
    #define PR			62499		// Fclk = 32 MHz (configurada bo bootloader)
#else
    #define PR			31249		// Fclk = 4MHz (usar 4 MHz na simulação do ISIS)
#endif
#ifdef _BOOTLOADER  
    #define PST			0x0030		// Fclk = 32 MHz (configurada bo bootloader)
#else
    #define PST			0x0020		// Fclk = 4MHz (usar 4 MHz na simulação do ISIS)
#endif

char dia,bau,tecla;
int q=0,x,a,b,servo=0,i=0,led=0,emergencia=0,s=0;

 // Funcao principal
int main(void) {
    //configure os perifericos
    
    int c,escrever,estado;
    
    UART1_Initialize();    //configuração da 'tela preta'
    LCD_Init(); 
    Teclado_Init();
    LCD_LimpaDisplay(); 
    
    TRISDbits.TRISD1=1;         //botão
    TRISDbits.TRISD5=0;         //led
    TRISDbits.TRISD10=0;        //buzzer
    TRISDbits.TRISD0=0;         //servo
    
    LATDbits.LATD5 = 0;         
    LATDbits.LATD10 = 0;        
    
    RPINR0bits.INT1R = 24;      //remapeamento interrupção botão
    
    RPOR5bits.RP11R=18;   //funcionalidade 18 (COMPARE 1 Tabela 10-3) - pino RP0 
    // configurando o Timer 1 (pois vou escolher ele para funcionar com o COMPARE)
    T5CON=0;                                    //reset do TMR4
    
    T5CONbits.TCKPS=PS;                 //PS 1:8   
    
    OC1R =625;                          //tempo em alta (dc)  
    OC1RS = 39999;                        //periodo do PWM  20ms
    OC1CON1=0;                            //reset do OC1
    OC1CON2=0;                            //reset do OC2
    OC1CON1bits.OCTSEL=0b011;  //TMR1 como temporizador do COMPARE 1
    OC1CON1bits.OCM=0b110;         //modo PWM
    OC1CON2bits.SYNCSEL = 0b11111;  // OC1RS limitar a contagem do OC1TMR
    OC1TMR = 0;                                //zera o contador do COMPARE         
    
    IPC0bits.OC1IP=3;
    IFS0bits.OC1IF=0;
    
    
    
    
    T1CON=0;
    TMR1=0;
    PR1 = PR;
    T1CON = PST;
    IPC0bits.T1IP = 1;
    IFS0bits.T1IF = 0;
    
    
    T2CON=0;
    TMR2=0;
    PR2 = PR;
    T2CON = PST;
    IPC1bits.T2IP = 2;
    IFS0bits.T2IF = 0;
    
    
    INTCON2bits.INT1EP = 1;
    IFS1bits.INT1IF = 0;
    IPC5bits.INT1IP = 5;
    
    IEC1bits.INT1IE = 1;
    IEC0bits.T1IE = 1;    
    IEC0bits.OC1IE=1;
    
    a=0;
    b=0;
    escrever=1;
    estado=0;
    
    LCD_PosicaoCursor(1,7);
    LCD_EscreveFrase("Ola");
    __delay_ms(1500);
      
    while (1) // Loop principal
    {
        
        if(escrever==1)
        {
            
            LCD_PosicaoCursor(1,7);
            LCD_EscreveFrase("   ");
            LCD_PosicaoCursor(1,1);
            LCD_EscreveFrase("Dia:");
            do{
                dia = Teclado_Leitura();       //chamando a função para ler a tecla pressionada do teclado
                bau=dia;

            }while(dia<'1');
            
            LCD_EscreveCaractere(dia);
            __delay_ms(1000);
            LCD_PosicaoCursor(1,1);

            LCD_EscreveFrase("Selecao do tempo");
            escrever=0;
        }
        if(escrever==0)
        {
            LCD_PosicaoCursor(2,8);
            LCD_EscreveInteiro(a);
            LCD_PosicaoCursor(2,9);
            LCD_EscreveInteiro(b);
            LCD_PosicaoCursor(2,9);
        }
        
        if(led==1)
        {
            
            LATDbits.LATD10 = 1;
            dia=bau;
            T1CONbits.TON = 0;
            IEC0bits.OC1IE=1;
            T5CONbits.TON=1;
            do
            {
                LATDbits.LATD5^=1;
                __delay_ms(200);
                i++;
                
                tecla = Teclado_Leitura();       //chamando a função para ler a tecla pressionada do teclado
                __delay_ms(200);
                if(i==7)
                {
                    printf("\nOla, Railla ainda nao tomou o remedio do horario.");
                }

            }while(tecla!='*');
            dia='8';
            LATDbits.LATD10=0;
            LATDbits.LATD5=0;
            
            LCD_PosicaoCursor(1,1);
            LCD_EscreveFrase("Remedio tomado<3");
            LCD_PosicaoCursor(2,8);
            LCD_EscreveFrase("  ");
            
            printf("\nRailla tomou o remedio :)");
            
            __delay_ms(2000);
            LCD_PosicaoCursor(1,1);
            LCD_EscreveFrase("Tempo atual:    ");

            i=0;
            
            led=0;
            LATDbits.LATD10 = 0;

            T1CONbits.TON = 1;
            
        }
        
        if(emergencia==1)
        {
            do
            {
                LATDbits.LATD10 = 1; //BUZZER
                printf("\nEMERGENCIA COM RAILLA!!!");
                LCD_PosicaoCursor(1,1);
                LCD_EscreveFrase("                ");
                LCD_PosicaoCursor(2,8);
                LCD_EscreveFrase("  ");
                LCD_PosicaoCursor(1,1);
                LCD_EscreveFrase("EMERGENCIA!!!   ");
                __delay_ms(1000);
                
                tecla = Teclado_Leitura();       //chamando a função para ler a tecla pressionada do teclado
                __delay_ms(200);
            }while(tecla!='8');
            printf("\nEmergencia de Railla resolvida:)");

            LATDbits.LATD10 = 0;
            LATDbits.LATD5 = 0;
            LCD_PosicaoCursor(1,1);
            LCD_EscreveFrase("Tempo atual:    ");
            LCD_PosicaoCursor(2,8);
            LCD_EscreveInteiro(a);
            LCD_PosicaoCursor(2,9);
            LCD_EscreveInteiro(b);
            LCD_PosicaoCursor(2,9);
            emergencia=0;

            T1CONbits.TON=1;

        }

        tecla = Teclado_Leitura();       //chamando a função para ler a tecla pressionada do teclado
        
        if(tecla=='3')
        {
            b=b+5;
            LCD_PosicaoCursor(2,9);
            if(b>9)
            {
                b=0;
                a++;
                LCD_PosicaoCursor(2,9);
            }
        }
        else if(tecla=='1')
        {
            b=b-5;
            LCD_PosicaoCursor(2,9);
            if(b<0)
            {
                b=5;
                a--;
                LCD_PosicaoCursor(2,9);
            }
        }
        else if(tecla=='2')
        {
            c=a*10+b;
            if(c==0)
            {
                LCD_PosicaoCursor(1,1);
                LCD_EscreveFrase("Tempo Invalido  ");
                __delay_ms(2000);
                LCD_PosicaoCursor(1,1);
                LCD_EscreveFrase("Tempo atual:    ");
            }

            switch(c)
            {
                case 5:
                    x=5;
                    break;
                case 10:
                    x=10;
                    break;
                case 15:
                    x=15;
                    break;
                case 20:
                    x=20;
                    break;
                case 25:
                    x=25;
                    break;
                case 30:
                    x=30;
                    break;
                case 35:
                    x=35;
                    break;
                case 40:
                    x=40;
                    break;
            }
            T1CONbits.TON = 1;            
        }
//        else if(tecla=='*')
//        {
//            
//            LATDbits.LATD10=0;
//            LATDbits.LATD5=0;
//            
//            IEC0bits.OC1IE=0;
//            T1CONbits.TON = 1;
//            LCD_PosicaoCursor(1,1);
//            LCD_EscreveFrase("Remedio tomado<3");
//            LCD_PosicaoCursor(2,8);
//            LCD_EscreveFrase("  ");
//            
//            printf("\nRailla tomou o remedio :)");
//            
//            __delay_ms(2000);
//            LCD_PosicaoCursor(1,1);
//            LCD_EscreveFrase("Tempo atual:    ");
//            
//            q=0;
//            
//        }
        else if(tecla=='#')
        {
            T1CONbits.TON = 0;
            LCD_PosicaoCursor(1,1);
            LCD_EscreveFrase("Dia:            ");
            LCD_PosicaoCursor(2,8);
            LCD_EscreveFrase("  ");
            LCD_PosicaoCursor(1,5);
            
            do
            {
                dia = Teclado_Leitura();       //chamando a função para ler a tecla pressionada do teclado
            }while(dia<'1');
            
            LCD_EscreveCaractere(dia);
            __delay_ms(1000);
            LCD_PosicaoCursor(1,1);
            LCD_EscreveFrase("Tempo atual:    ");
            T1CONbits.TON = 1;
        }
    }

    return -1;
}

// Interrupt function 
void __attribute__((interrupt,no_auto_psv)) _T1Interrupt(void){     //alarme
    q++; 
    
    if(q==x)
    {
        led=1;
        q=0;
    }
    IFS0bits.T1IF = 0;
}
void __attribute__((interrupt,no_auto_psv)) _INT1Interrupt(void)
{
    T1CONbits.TON=0;
    LATDbits.LATD5=1;
    emergencia=1;
    IFS1bits.INT1IF = 0;
}
void __attribute__((interrupt,no_auto_psv)) _OC1Interrupt(void)
{
    switch (dia)
        {
            case '1':
                OC1R=729;
                break;
            case '2':
                OC1R=1354;
                break;
            case '3':
                OC1R=2083;
                break;
            case'4':
                OC1R=2813;
                break;
            case'5':
                OC1R=3542;
                break;
            case'6':
                OC1R=4271;
                break;
            case'7':
                OC1R=5000;
                break;
            case '8':
                OC1R=729;
                break;
        }
    IFS0bits.OC1IF=0;
}
